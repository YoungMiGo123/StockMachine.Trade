// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trading.Core.Models.Data;

namespace StockMachine.Trade.Migrations
{
    [DbContext(typeof(TradingCoreDbContext))]
    partial class TradingCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Trading.Core.Models.Commodities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("High")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Low")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Volume")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Commodities");
                });

            modelBuilder.Entity("Trading.Core.Models.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientRelationshipServicesEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coordinates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketComplianceEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("Trading.Core.Models.Exchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ExchangeBreakDownId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExchangeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Market")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketCap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MicCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TradingScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("contactInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeBreakDownId");

                    b.HasIndex("TradingScheduleId");

                    b.HasIndex("contactInfoId");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("Trading.Core.Models.ExchangeBreakDown", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExchangeCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeTimeZonesInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketCapitilization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubSidiaryMarkets")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeBreakDown");
                });

            modelBuilder.Entity("Trading.Core.Models.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyOverview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContanctInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("High")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstrumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Low")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegulatoryDocuments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Volume")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Trading.Core.Models.StockPeer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Change")
                        .HasColumnType("float");

                    b.Property<string>("ChangePercent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("StockPeer");
                });

            modelBuilder.Entity("Trading.Core.Models.TopMovers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Change")
                        .HasColumnType("float");

                    b.Property<double>("ChangeFactor")
                        .HasColumnType("float");

                    b.Property<string>("ChangeFactorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TopMovers");
                });

            modelBuilder.Entity("Trading.Core.Models.TradingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoreTradingSessions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtendedHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreTradingSession")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TradingSchedule");
                });

            modelBuilder.Entity("Trading.Core.Models.Exchange", b =>
                {
                    b.HasOne("Trading.Core.Models.ExchangeBreakDown", "ExchangeBreakDown")
                        .WithMany()
                        .HasForeignKey("ExchangeBreakDownId");

                    b.HasOne("Trading.Core.Models.TradingSchedule", "TradingSchedule")
                        .WithMany()
                        .HasForeignKey("TradingScheduleId");

                    b.HasOne("Trading.Core.Models.ContactInfo", "contactInfo")
                        .WithMany()
                        .HasForeignKey("contactInfoId");

                    b.Navigation("contactInfo");

                    b.Navigation("ExchangeBreakDown");

                    b.Navigation("TradingSchedule");
                });

            modelBuilder.Entity("Trading.Core.Models.StockPeer", b =>
                {
                    b.HasOne("Trading.Core.Models.Stock", null)
                        .WithMany("SectorPeers")
                        .HasForeignKey("StockId");
                });

            modelBuilder.Entity("Trading.Core.Models.Stock", b =>
                {
                    b.Navigation("SectorPeers");
                });
#pragma warning restore 612, 618
        }
    }
}
